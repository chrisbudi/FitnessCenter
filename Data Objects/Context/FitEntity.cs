// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace DataObjects.Context
{
    using DataObjects.Configuration;
    using DataObjects.Entities;
    using DataObjects.Interfaces;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.19.3.0")]
    public class FitEntity : System.Data.Entity.DbContext, IFitEntity
    {
        public System.Data.Entity.DbSet<ApplicationGroup> ApplicationGroups { get; set; }
        public System.Data.Entity.DbSet<ApplicationGroupRole> ApplicationGroupRoles { get; set; }
        public System.Data.Entity.DbSet<ApplicationUserGroup> ApplicationUserGroups { get; set; }
        public System.Data.Entity.DbSet<AspForm> AspForms { get; set; }
        public System.Data.Entity.DbSet<AspFormAuthorization> AspFormAuthorizations { get; set; }
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public System.Data.Entity.DbSet<ExcelLipo5> ExcelLipo5 { get; set; }
        public System.Data.Entity.DbSet<ExcelPT> ExcelPTs { get; set; }
        public System.Data.Entity.DbSet<ExcelUploadDB> ExcelUploadDBs { get; set; }
        public System.Data.Entity.DbSet<log> logs { get; set; }
        public System.Data.Entity.DbSet<Logtest> Logtests { get; set; }
        public System.Data.Entity.DbSet<stMemberFingerPrint> stMemberFingerPrints { get; set; }
        public System.Data.Entity.DbSet<StrActionKlaim> StrActionKlaims { get; set; }
        public System.Data.Entity.DbSet<StrActionKlaimParam> StrActionKlaimParams { get; set; }
        public System.Data.Entity.DbSet<strAktivitasSale> strAktivitasSales { get; set; }
        public System.Data.Entity.DbSet<strKlaimPT> strKlaimPTs { get; set; }
        public System.Data.Entity.DbSet<strLocBO> strLocBOes { get; set; }
        public System.Data.Entity.DbSet<strLocMember> strLocMembers { get; set; }
        public System.Data.Entity.DbSet<strPayment> strPayments { get; set; }
        public System.Data.Entity.DbSet<strPaymentMember> strPaymentMembers { get; set; }
        public System.Data.Entity.DbSet<strPersonEvent> strPersonEvents { get; set; }
        public System.Data.Entity.DbSet<sysdiagram> sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<tActionPT> tActionPTs { get; set; }
        public System.Data.Entity.DbSet<tBank> tBanks { get; set; }
        public System.Data.Entity.DbSet<tCardStatu> tCardStatus { get; set; }
        public System.Data.Entity.DbSet<tEvent> tEvents { get; set; }
        public System.Data.Entity.DbSet<tEventScore> tEventScores { get; set; }
        public System.Data.Entity.DbSet<tEventStep> tEventSteps { get; set; }
        public System.Data.Entity.DbSet<tKela> tKelas { get; set; }
        public System.Data.Entity.DbSet<tLocFitnessCenter> tLocFitnessCenters { get; set; }
        public System.Data.Entity.DbSet<tMember> tMembers { get; set; }
        public System.Data.Entity.DbSet<tMemberState> tMemberStates { get; set; }
        public System.Data.Entity.DbSet<tMemberType> tMemberTypes { get; set; }
        public System.Data.Entity.DbSet<tPaketPT> tPaketPTs { get; set; }
        public System.Data.Entity.DbSet<tPaymentType> tPaymentTypes { get; set; }
        public System.Data.Entity.DbSet<tPerson> tPersons { get; set; }
        public System.Data.Entity.DbSet<tPosisi> tPosisis { get; set; }
        public System.Data.Entity.DbSet<trAktifitasKela> trAktifitasKelas { get; set; }
        public System.Data.Entity.DbSet<trAktifitasMember> trAktifitasMembers { get; set; }
        public System.Data.Entity.DbSet<trCinCout> trCinCouts { get; set; }
        public System.Data.Entity.DbSet<trEventScore> trEventScores { get; set; }
        public System.Data.Entity.DbSet<trEventStep> trEventSteps { get; set; }
        public System.Data.Entity.DbSet<trMembership> trMemberships { get; set; }
        public System.Data.Entity.DbSet<tRoleEvent> tRoleEvents { get; set; }
        public System.Data.Entity.DbSet<trPaymentWith> trPaymentWiths { get; set; }
        public System.Data.Entity.DbSet<trPembayaran> trPembayarans { get; set; }
        public System.Data.Entity.DbSet<trPersonalTrainer> trPersonalTrainers { get; set; }
        public System.Data.Entity.DbSet<trPersonEvent> trPersonEvents { get; set; }
        public System.Data.Entity.DbSet<trPlanAktifitasPT> trPlanAktifitasPTs { get; set; }
        public System.Data.Entity.DbSet<trPlanKela> trPlanKelas { get; set; }
        public System.Data.Entity.DbSet<trTTD> trTTDs { get; set; }
        public System.Data.Entity.DbSet<tRuangKela> tRuangKelas { get; set; }
        public System.Data.Entity.DbSet<tSalesAction> tSalesActions { get; set; }
        public System.Data.Entity.DbSet<tStatusMember> tStatusMembers { get; set; }
        public System.Data.Entity.DbSet<tStatusMemberPrice> tStatusMemberPrices { get; set; }
        public System.Data.Entity.DbSet<tTypeStatusCinCout> tTypeStatusCinCouts { get; set; }
        public System.Data.Entity.DbSet<tUserBackOffice> tUserBackOffices { get; set; }

        static FitEntity()
        {
            System.Data.Entity.Database.SetInitializer<FitEntity>(null);
        }

        public FitEntity()
            : base("Name=FitnessDbContext")
        {
        }

        public FitEntity(string connectionString)
            : base(connectionString)
        {
        }

        public FitEntity(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public FitEntity(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public FitEntity(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ApplicationGroupConfiguration());
            modelBuilder.Configurations.Add(new ApplicationGroupRoleConfiguration());
            modelBuilder.Configurations.Add(new ApplicationUserGroupConfiguration());
            modelBuilder.Configurations.Add(new AspFormConfiguration());
            modelBuilder.Configurations.Add(new AspFormAuthorizationConfiguration());
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration());
            modelBuilder.Configurations.Add(new ExcelLipo5Configuration());
            modelBuilder.Configurations.Add(new ExcelPTConfiguration());
            modelBuilder.Configurations.Add(new ExcelUploadDBConfiguration());
            modelBuilder.Configurations.Add(new logConfiguration());
            modelBuilder.Configurations.Add(new LogtestConfiguration());
            modelBuilder.Configurations.Add(new stMemberFingerPrintConfiguration());
            modelBuilder.Configurations.Add(new StrActionKlaimConfiguration());
            modelBuilder.Configurations.Add(new StrActionKlaimParamConfiguration());
            modelBuilder.Configurations.Add(new strAktivitasSaleConfiguration());
            modelBuilder.Configurations.Add(new strKlaimPTConfiguration());
            modelBuilder.Configurations.Add(new strLocBOConfiguration());
            modelBuilder.Configurations.Add(new strLocMemberConfiguration());
            modelBuilder.Configurations.Add(new strPaymentConfiguration());
            modelBuilder.Configurations.Add(new strPaymentMemberConfiguration());
            modelBuilder.Configurations.Add(new strPersonEventConfiguration());
            modelBuilder.Configurations.Add(new sysdiagramConfiguration());
            modelBuilder.Configurations.Add(new tActionPTConfiguration());
            modelBuilder.Configurations.Add(new tBankConfiguration());
            modelBuilder.Configurations.Add(new tCardStatuConfiguration());
            modelBuilder.Configurations.Add(new tEventConfiguration());
            modelBuilder.Configurations.Add(new tEventScoreConfiguration());
            modelBuilder.Configurations.Add(new tEventStepConfiguration());
            modelBuilder.Configurations.Add(new tKelaConfiguration());
            modelBuilder.Configurations.Add(new tLocFitnessCenterConfiguration());
            modelBuilder.Configurations.Add(new tMemberConfiguration());
            modelBuilder.Configurations.Add(new tMemberStateConfiguration());
            modelBuilder.Configurations.Add(new tMemberTypeConfiguration());
            modelBuilder.Configurations.Add(new tPaketPTConfiguration());
            modelBuilder.Configurations.Add(new tPaymentTypeConfiguration());
            modelBuilder.Configurations.Add(new tPersonConfiguration());
            modelBuilder.Configurations.Add(new tPosisiConfiguration());
            modelBuilder.Configurations.Add(new trAktifitasKelaConfiguration());
            modelBuilder.Configurations.Add(new trAktifitasMemberConfiguration());
            modelBuilder.Configurations.Add(new trCinCoutConfiguration());
            modelBuilder.Configurations.Add(new trEventScoreConfiguration());
            modelBuilder.Configurations.Add(new trEventStepConfiguration());
            modelBuilder.Configurations.Add(new trMembershipConfiguration());
            modelBuilder.Configurations.Add(new tRoleEventConfiguration());
            modelBuilder.Configurations.Add(new trPaymentWithConfiguration());
            modelBuilder.Configurations.Add(new trPembayaranConfiguration());
            modelBuilder.Configurations.Add(new trPersonalTrainerConfiguration());
            modelBuilder.Configurations.Add(new trPersonEventConfiguration());
            modelBuilder.Configurations.Add(new trPlanAktifitasPTConfiguration());
            modelBuilder.Configurations.Add(new trPlanKelaConfiguration());
            modelBuilder.Configurations.Add(new trTTDConfiguration());
            modelBuilder.Configurations.Add(new tRuangKelaConfiguration());
            modelBuilder.Configurations.Add(new tSalesActionConfiguration());
            modelBuilder.Configurations.Add(new tStatusMemberConfiguration());
            modelBuilder.Configurations.Add(new tStatusMemberPriceConfiguration());
            modelBuilder.Configurations.Add(new tTypeStatusCinCoutConfiguration());
            modelBuilder.Configurations.Add(new tUserBackOfficeConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ApplicationGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new ApplicationGroupRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new ApplicationUserGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new AspFormConfiguration(schema));
            modelBuilder.Configurations.Add(new AspFormAuthorizationConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new ExcelLipo5Configuration(schema));
            modelBuilder.Configurations.Add(new ExcelPTConfiguration(schema));
            modelBuilder.Configurations.Add(new ExcelUploadDBConfiguration(schema));
            modelBuilder.Configurations.Add(new logConfiguration(schema));
            modelBuilder.Configurations.Add(new LogtestConfiguration(schema));
            modelBuilder.Configurations.Add(new stMemberFingerPrintConfiguration(schema));
            modelBuilder.Configurations.Add(new StrActionKlaimConfiguration(schema));
            modelBuilder.Configurations.Add(new StrActionKlaimParamConfiguration(schema));
            modelBuilder.Configurations.Add(new strAktivitasSaleConfiguration(schema));
            modelBuilder.Configurations.Add(new strKlaimPTConfiguration(schema));
            modelBuilder.Configurations.Add(new strLocBOConfiguration(schema));
            modelBuilder.Configurations.Add(new strLocMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new strPaymentConfiguration(schema));
            modelBuilder.Configurations.Add(new strPaymentMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new strPersonEventConfiguration(schema));
            modelBuilder.Configurations.Add(new sysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new tActionPTConfiguration(schema));
            modelBuilder.Configurations.Add(new tBankConfiguration(schema));
            modelBuilder.Configurations.Add(new tCardStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new tEventConfiguration(schema));
            modelBuilder.Configurations.Add(new tEventScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new tEventStepConfiguration(schema));
            modelBuilder.Configurations.Add(new tKelaConfiguration(schema));
            modelBuilder.Configurations.Add(new tLocFitnessCenterConfiguration(schema));
            modelBuilder.Configurations.Add(new tMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new tMemberStateConfiguration(schema));
            modelBuilder.Configurations.Add(new tMemberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new tPaketPTConfiguration(schema));
            modelBuilder.Configurations.Add(new tPaymentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new tPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new tPosisiConfiguration(schema));
            modelBuilder.Configurations.Add(new trAktifitasKelaConfiguration(schema));
            modelBuilder.Configurations.Add(new trAktifitasMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new trCinCoutConfiguration(schema));
            modelBuilder.Configurations.Add(new trEventScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new trEventStepConfiguration(schema));
            modelBuilder.Configurations.Add(new trMembershipConfiguration(schema));
            modelBuilder.Configurations.Add(new tRoleEventConfiguration(schema));
            modelBuilder.Configurations.Add(new trPaymentWithConfiguration(schema));
            modelBuilder.Configurations.Add(new trPembayaranConfiguration(schema));
            modelBuilder.Configurations.Add(new trPersonalTrainerConfiguration(schema));
            modelBuilder.Configurations.Add(new trPersonEventConfiguration(schema));
            modelBuilder.Configurations.Add(new trPlanAktifitasPTConfiguration(schema));
            modelBuilder.Configurations.Add(new trPlanKelaConfiguration(schema));
            modelBuilder.Configurations.Add(new trTTDConfiguration(schema));
            modelBuilder.Configurations.Add(new tRuangKelaConfiguration(schema));
            modelBuilder.Configurations.Add(new tSalesActionConfiguration(schema));
            modelBuilder.Configurations.Add(new tStatusMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new tStatusMemberPriceConfiguration(schema));
            modelBuilder.Configurations.Add(new tTypeStatusCinCoutConfiguration(schema));
            modelBuilder.Configurations.Add(new tUserBackOfficeConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<testprocedureReturnModel> testprocedure()
        {
            int procResult;
            return testprocedure(out procResult);
        }

        public System.Collections.Generic.List<testprocedureReturnModel> testprocedure(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<testprocedureReturnModel>("EXEC @procResult = [dbo].[testprocedure] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int Tool_ScriptDiagram(string name)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 128 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Tool_ScriptDiagram] @name", nameParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int Tool_ScriptDiagram2005(string name)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 128 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Tool_ScriptDiagram2005] @name", nameParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
