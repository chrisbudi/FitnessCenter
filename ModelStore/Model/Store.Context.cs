//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fit.ViewStore.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class fitnessDBEntities : DbContext
    {
        public fitnessDBEntities()
            : base("name=fitnessDBEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }


        [DbFunction("fitnessDBEntities", "GET_FORMROLEAUTH")]
        public virtual IQueryable<GET_FORMROLEAUTH_Result> GET_FORMROLEAUTH(string gROUP)
        {
            var gROUPParameter = gROUP != null ?
                new ObjectParameter("GROUP", gROUP) :
                new ObjectParameter("GROUP", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GET_FORMROLEAUTH_Result>("[fitnessDBEntities].[GET_FORMROLEAUTH](@GROUP)", gROUPParameter);
        }

        [DbFunction("fitnessDBEntities", "GetLastPersonId")]
        public virtual IQueryable<GetLastPersonId_Result> GetLastPersonId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLastPersonId_Result>("[fitnessDBEntities].[GetLastPersonId]()");
        }

        public virtual ObjectResult<string> GetLastBackOfficeId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLastBackOfficeId");
        }

        public virtual ObjectResult<string> GetLastMemberId(string formatNo, string formatExtensi)
        {
            var formatNoParameter = formatNo != null ?
                new ObjectParameter("FormatNo", formatNo) :
                new ObjectParameter("FormatNo", typeof(string));

            var formatExtensiParameter = formatExtensi != null ?
                new ObjectParameter("FormatExtensi", formatExtensi) :
                new ObjectParameter("FormatExtensi", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLastMemberId", formatNoParameter, formatExtensiParameter);
        }

        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }

        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        public virtual ObjectResult<testprocedure_Result> testprocedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<testprocedure_Result>("testprocedure");
        }

        public virtual int Tool_ScriptDiagram(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tool_ScriptDiagram", nameParameter);
        }

        public virtual int Tool_ScriptDiagram2005(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tool_ScriptDiagram2005", nameParameter);
        }
    }
}
