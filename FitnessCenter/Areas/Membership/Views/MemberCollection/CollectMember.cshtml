@using DataAccessService.Master
@model ViewModel.Membership.Registrasi.ViewModelCollection
@{
    ViewBag.Title = "Member Collection";
}

<!-- BEGIN BREADCRUMBS -->
<div class="breadcrumbs">
    <h1>@ViewBag.Title</h1>
    @Html.Partial("_pageBreadcrumbs")
</div>

<!-- END BREADCRUMBS -->
<!-- BEGIN PAGE BASE CONTENT -->
<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("CollectMember", "MemberCollection", FormMethod.Post, new { @class = "form-horizontal form-row-seperated" }))
            {
            <div class="portlet light">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-shopping-cart"></i>New @ViewBag.Title
                    </div>
                    <div class="actions btn btn-set">
                        <a class="btn btn-default" href="@Url.Action("Index")">
                            <i class="fa fa-angle-left"></i> Back
                        </a>
                        <button type="reset" class="btn btn-secondary-outline reset">
                            <i class="fa fa-reply"></i> Reset
                        </button>
                        <button type="submit" class="btn btn-success">
                            <i class="fa fa-check"></i> Save
                        </button>
                        <div class="btn-group">
                            <a class="btn btn-success dropdown-toggle" href="javascript:;" data-toggle="dropdown">
                                <i class="fa fa-share"></i> More
                                <i class="fa fa-angle-down"></i>
                            </a>
                            <div class="dropdown-menu pull-right">
                                <li>
                                    <a href="javascript:;"> Duplicate </a>
                                </li>
                                <li>
                                    <a href="javascript:;"> Delete </a>
                                </li>
                                <li class="dropdown-divider"> </li>
                                <li>
                                    <a href="javascript:;"> Print </a>
                                </li>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="tabbable-bordered">
                        <ul class="nav nav-tabs">
                            <li class="active">
                                <a href="#tab_general" data-toggle="tab"> General </a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_general">
                                <div class="row">
                                    <div class="form-body">
                                        <div class="col-md-6">
                                            @Html.HiddenFor(m => m.PaymentMember.trPaymentID)
                                            @Html.HiddenFor(m => m.PaymentMember.trMembershipID)
                                            @Html.HiddenFor(m => m.PaymentNo)

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Name:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentMember.trMembership_trMembershipID.tMember.tPerson.PNama, new { @class = "form-control input-medium disabled", @readonly = true })
                                                    <span class="text-danger">@Html.ValidationMessageFor(m => m.PaymentMember.trMembership_trMembershipID.tMember.tPerson.PNama)</span>
                                                    <span class="help-block">Member Name</span>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Address:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentMember.trMembership_trMembershipID.tMember.tPerson.PAlamat, new { @class = "form-control input-medium disabled", @readonly = true })
                                                    <span class="text-danger">@Html.ValidationMessageFor(m => m.PaymentMember.trMembership_trMembershipID.tMember.tPerson.PAlamat)</span>
                                                    <span class="help-block">Person Address</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Payment:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentWith.payAmount, new { @class = "form-control payAmount input-medium disabled auto", @readonly = true })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Payment Amount</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Paid Amount:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentWith.paidAmount, new { @class = "form-control paidAmount input-medium auto" })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Paid Amount</span>
                                                </div>
                                            </div>


                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Payment Type:
                                                    <span class="required"> * </span>
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.DropDownListFor(m => m.PaymentWith.PaymentTypeID, new SelectList(new DataServicePaymentType().LoadAllData(), "PaymentTypeID", "NamaType", Model.PaymentWith.PaymentTypeID), new { @class = "form-control input-medium" })
                                                    <div class="text-danger">
                                                        @Html.ValidationMessageFor(m => m.PaymentWith.PaymentTypeID)
                                                    </div>
                                                    <span class="help-block">Payment Type</span>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Bank:
                                                    <span class="required"> * </span>
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.DropDownListFor(m => m.PaymentWith.BankID, new SelectList(new DataServiceBank().LoadAllBank(), "BankID", "NamaBank", Model.PaymentWith.BankID), new { @class = "form-control paymentDetailBank input-medium" })
                                                    <div class="text-danger">
                                                        @Html.ValidationMessageFor(m => m.PaymentWith.BankID)
                                                    </div>
                                                    <span class="help-block">Payment Type</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Pemegang Kartu:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentWith.Pemegang, new { @class = "form-control input-medium" })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Card holder</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    No Kartu:
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentWith.NoKartu, new { @class = "form-control input-medium" })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Card No</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Approval Code:
                                                </label>
                                                <div class="col-md-5">
                                                    @Html.TextBoxFor(m => m.PaymentWith.ApprCode, new { @class = "form-control input-medium" })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Approval Code</span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">
                                                    Trace Code:
                                                    <span class="required"> * </span>
                                                </label>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(m => m.PaymentWith.TraceCode, new { @class = "form-control input-medium" })
                                                    <span class="text-danger"></span>
                                                    <span class="help-block">Trace Code</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<!-- END PAGE BASE CONTENT -->
<!-- END PAGE CONTENT-->
@section Scripts {

    @Scripts.Render("~/bundle/script/forminput")
    @Scripts.Render("~/bundle/script/jqueryval")
    @Scripts.Render("~/Scripts/select2FormControl.js")
    <script src="~/assets/global/scripts/gridevent.js"></script>

    <script>

        $(function () {
            //Metronic.init();// init metronic core components
            //Layout.init(); // init current layout

            //init datepickers
            $('.date-picker').datepicker({
                rtl: Metronic.isRTL(),
                format: 'dd/mm/yyyy',
                autoclose: true
            });

            function getMaskVal(lookUp) {
                var val = $(lookUp).inputmask('unmaskedvalue');
                return parseFloat(val === "" ? "0" : val);
            }

            function setMask(lookUp) {
                $(lookUp).inputmask('remove');
                $(lookUp).inputmask('decimal', {
                    radixPoint: ',',
                    'groupSeparator': '.',
                    autoGroup: true,
                    digits: 2,
                    digitsOptional: true
                });
            }

            function reInitializeMaskEdit(lookUp) {
                $(lookUp).datepicker({
                    format: 'dd/mm/yyyy',
                    startDate: '+0d'
                });

                $(lookUp).inputmask("dd/mm/yyyy", {
                    autoUnmask: false
                }); //direct mask
            }

            //Initalize Payment Table
            //            var dtPaymentDetail = $('#datatable_paymentDetail')
            //                .DataTable({
            //                    "serverSide": false,
            //                    "processing": true,
            //                    "autoWidth": false,
            //                    //                        "searching": false,
            //                    "deferRender": true,
            //                    "filter": true,
            //                    "lengthMenu": [5, 10, 25, 50, 75, 100],
            //                    "pageLength": 10,
            //                    "columns": [
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        },
            //                        {
            //                            "orderable": false,
            //                        }
            //                    ],
            //                    "order": [[0, "asc"]]
            //                });


            //            function reAmountDetail() {
            //                var totalSummaryPaymentList = 0;
            //                var totalOverPaymentDetail = 0;
            //
            //                for (var i = 0; i <= dtPaymentDetail.rows().data().length - 1; i++) {
            //                    var currentRow = dtPaymentDetail.row(i);
            //                    totalSummaryPaymentList += getMaskVal(currentRow.nodes().to$().find('.paymentamountdetail'));
            //                }
            //
            //                $('#TotalSumPayment').val(totalSummaryPaymentList);
            //
            //                var total = getMaskVal('#PersonalTrainer_PTTotal');
            //
            //                total -= totalSummaryPaymentList;
            //                if (total < 0) {
            //                    totalOverPaymentDetail = total * -1;
            //                    total = 0;
            //                }
            //                console.log(total);
            //                $('#TotalPaymentMustPay').val(total);
            //                $('#TotalSumPayment').val(totalSummaryPaymentList);
            //                $('#totalOverPaymentDetail').val(totalOverPaymentDetail);
            //            }
            //
            //            function addDetailPayment(paymentType, amount) {
            //                $.ajax({
            //                    type: 'GET',
            //                    url: '@Url.Action("AddDataPaymentDetail", "RegisterPT", new {area = "Trainers"})',
            //                    data: {
            //                        amount: amount,
            //                        paymentType: paymentType
            //                    }
            //                }).done(function (template) {
            //                    dtPaymentDetail.row.add($(template)).draw();
            //                    setMask(".autoDetail");
            //                    reInitializeMaskEdit('.mask-date');
            //                    //Metronic.init();
            //                    reAmountDetail();
            //                });
            //            };


            $('#PaymentWith_PaymentTypeID').on('change', function () {
                var payType = $(this).find('option:selected').text();
                console.log(payType);
                console.log(payType !== 'Cash');
                if (payType !== 'Cash') {
                    $('.paymentDetailBank').removeClass('disabled');
                    $('.paidAmountDetail').removeClass('disabled');

                    $('.paymentDetailBank').prop("disabled", false);

                    $('.paidAmountDetail').prop('readonly', true);

                    $('.paymentDetailBank').val(1);


                } else {
                    if (!$('.paymentDetailBank').hasClass('disabled')) {
                        $('.paymentDetailBank').addClass('disabled');
                        $('.paidAmountDetail').addClass('disabled');
                    }

                    $('.paidAmountDetail').prop("readonly", false);
                    $('.paymentDetailBank').prop("disabled", true);


                    $('.paymentDetailBank').val("");
                }
            });

            $(window).load(function () {
                $('.paymentDetailBank').val("");

                $('#PaymentWith_PaymentTypeID').trigger('change');

                setMask($('.auto'));
            });

        });

    </script>
}
